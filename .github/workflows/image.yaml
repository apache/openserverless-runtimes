# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
name: Build Images
on: 
  push:
    tags:
      - '[0-9]*'
    branches-ignore: '*'
  #pull_request:
  #  branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  golang:
    name: Build Golang
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      matrix:
        version: [v1.21,v1.22,v1.22proxy]      
    steps:
      - name: Checkout recursive
        uses: actions/checkout@v2
      - name: License check
        uses: apache/skywalking-eyes@main
      #  continue-on-error: true
      - name: Assign TAG from pull request
        if:  ${{ github.event_name == 'pull_request' }}
        run: |
          echo "IMG_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Assign TAG from push
        if:  ${{ github.event_name != 'pull_request' }}
        run: |
          echo "IMG_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"
      - name: Use non ASF docker hub repo
        if:  ${{ github.repository_owner != 'apache'}}
        run: |
          echo "BASE_REPO=apache" >> "$GITHUB_ENV"        
      - name: Use ASF docker hub repo
        if:  ${{ github.repository_owner == 'apache'}}
        run: |
          echo "BASE_REPO=apache" >> "$GITHUB_ENV"                    
      - name: Task
        run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin    
      - name: Load DockerHub secrets
        uses: 1password/load-secrets-action@v2
        with:
          # Export loaded secrets as environment variables
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OPS_DOCKERHUB_USER: op://OpenServerless/ops_github_dockerhub/username
          OPS_DOCKERHUB_TOKEN: op://OpenServerless/ops_github_dockerhub/password
          OPS_BASE_COMMON_IMAGE: op://OpenServerless/ops_github_dockerhub/base_common_image
      - name: Registry login
        uses: docker/login-action@v3
        with:
          #registry: registry.hub.docker.com
          username: ${{ env.OPS_DOCKERHUB_USER }}
          password: ${{ env.OPS_DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "sciabarracom/openserverless-builder"
          use: true    
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./runtime/go/${{ matrix.version }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.BASE_REPO }}/openserverless-runtime-go:${{ matrix.version }}-${{ env.IMG_TAG }}
          build-args: COMMON=${{ env.OPS_BASE_COMMON_IMAGE }}
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}

  python:
      name: Build Python
      needs: golang
      runs-on: ubuntu-22.04
      strategy:
        max-parallel: 1
        matrix:
          version: [v3.10,v3.11,v3.12,v3.13]      
      steps:
        - name: Checkout recursive
          uses: actions/checkout@v2
        - name: License check
          uses: apache/skywalking-eyes@main
        #  continue-on-error: true
        - name: Assign TAG from pull request
          if:  ${{ github.event_name == 'pull_request' }}
          run: |
            echo "IMG_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
        - name: Assign TAG from push
          if:  ${{ github.event_name != 'pull_request' }}
          run: |
            echo "IMG_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"          
        - name: Use non ASF docker hub repo
          if:  ${{ github.repository_owner != 'apache'}}
          run: |
            echo "BASE_REPO=apache" >> "$GITHUB_ENV"        
        - name: Use ASF docker hub repo
          if:  ${{ github.repository_owner == 'apache'}}
          run: |
            echo "BASE_REPO=apache" >> "$GITHUB_ENV"             
        - name: Task
          run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin    
        - name: Load DockerHub secrets
          uses: 1password/load-secrets-action@v2
          with:
            # Export loaded secrets as environment variables
            export-env: true
          env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            OPS_DOCKERHUB_USER: op://OpenServerless/ops_github_dockerhub/username
            OPS_DOCKERHUB_TOKEN: op://OpenServerless/ops_github_dockerhub/password
            OPS_BASE_COMMON_IMAGE: op://OpenServerless/ops_github_dockerhub/base_common_image
        - name: Registry login
          uses: docker/login-action@v3
          with:
            #registry: registry.hub.docker.com
            username: ${{ env.OPS_DOCKERHUB_USER }}
            password: ${{ env.OPS_DOCKERHUB_TOKEN }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            version: "lab:latest"
            driver: cloud
            endpoint: "sciabarracom/openserverless-builder"
            use: true        
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./runtime/python/${{ matrix.version }}
            platforms: linux/amd64,linux/arm64
            tags: ${{ env.BASE_REPO }}/openserverless-runtime-python:${{ matrix.version }}-${{ env.IMG_TAG }}
            build-args: COMMON=${{ env.OPS_BASE_COMMON_IMAGE }}
            # For pull requests, export results to the build cache.
            # Otherwise, push to a registry.
            outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}          

  nodejs:
    name: Build NodeJs
    needs: python
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 1
      matrix:
        version: [v18,v20,v21]  
    steps:
      - name: Checkout recursive
        uses: actions/checkout@v2
      - name: License check
        uses: apache/skywalking-eyes@main
      #  continue-on-error: true
      - name: Assign TAG from pull request
        if:  ${{ github.event_name == 'pull_request' }}
        run: |
          echo "IMG_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Assign TAG from push
        if:  ${{ github.event_name != 'pull_request' }}
        run: |
          echo "IMG_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"          
      - name: Use non ASF docker hub repo
        if:  ${{ github.repository_owner != 'apache'}}
        run: |
          echo "BASE_REPO=apache" >> "$GITHUB_ENV"        
      - name: Use ASF docker hub repo
        if:  ${{ github.repository_owner == 'apache'}}
        run: |
          echo "BASE_REPO=apache" >> "$GITHUB_ENV"             
      - name: Task
        run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin    
      - name: Load DockerHub secrets
        uses: 1password/load-secrets-action@v2
        with:
          # Export loaded secrets as environment variables
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OPS_DOCKERHUB_USER: op://OpenServerless/ops_github_dockerhub/username
          OPS_DOCKERHUB_TOKEN: op://OpenServerless/ops_github_dockerhub/password
          OPS_BASE_COMMON_IMAGE: op://OpenServerless/ops_github_dockerhub/base_common_image
      - name: Registry login
        uses: docker/login-action@v3
        with:
          #registry: registry.hub.docker.com
          username: ${{ env.OPS_DOCKERHUB_USER }}
          password: ${{ env.OPS_DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "sciabarracom/openserverless-builder"
          use: true
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./runtime/nodejs/${{ matrix.version }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.BASE_REPO }}/openserverless-runtime-nodejs:${{ matrix.version }}-${{ env.IMG_TAG }}
          build-args: COMMON=${{ env.OPS_BASE_COMMON_IMAGE }}
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }} 
          
  php:
      name: Build Php
      needs: nodejs
      runs-on: ubuntu-22.04
      strategy:
        max-parallel: 1
        matrix:
          version: [v8.0,v8.1,v8.2,v8.3]      
      steps:
        - name: Checkout recursive
          uses: actions/checkout@v2
        - name: License check
          uses: apache/skywalking-eyes@main
        #  continue-on-error: true
        - name: Assign TAG from pull request
          if:  ${{ github.event_name == 'pull_request' }}
          run: |
            echo "IMG_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
        - name: Assign TAG from push
          if:  ${{ github.event_name != 'pull_request' }}
          run: |
            echo "IMG_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"          
        - name: Use ASF docker hub repo
          if:  ${{ github.repository_owner == 'apache'}}
          run: |
            echo "BASE_REPO=apache" >> "$GITHUB_ENV"             
        - name: Use non ASF docker hub repo
          if:  ${{ github.repository_owner != 'apache'}}
          run: |
            echo "BASE_REPO=apache" >> "$GITHUB_ENV"        
        - name: Task
          run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        - name: Load DockerHub secrets
          uses: 1password/load-secrets-action@v2
          with:
            # Export loaded secrets as environment variables
            export-env: true
          env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            OPS_DOCKERHUB_USER: op://OpenServerless/ops_github_dockerhub/username
            OPS_DOCKERHUB_TOKEN: op://OpenServerless/ops_github_dockerhub/password
            OPS_BASE_COMMON_IMAGE: op://OpenServerless/ops_github_dockerhub/base_common_image
        - name: Registry login
          uses: docker/login-action@v3
          with:
            #registry: registry.hub.docker.com
            username: ${{ env.OPS_DOCKERHUB_USER }}
            password: ${{ env.OPS_DOCKERHUB_TOKEN }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            version: "lab:latest"
            driver: cloud
            endpoint: "sciabarracom/openserverless-builder"
            use: true
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./runtime/php/${{ matrix.version }}
            platforms: linux/amd64,linux/arm64
            tags: ${{ env.BASE_REPO }}/openserverless-runtime-php:${{ matrix.version }}-${{ env.IMG_TAG }}
            build-args: COMMON=${{ env.OPS_BASE_COMMON_IMAGE }}
            # For pull requests, export results to the build cache.
            # Otherwise, push to a registry.
            outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}  

  java:
      name: Build Java
      needs: php
      runs-on: ubuntu-22.04
      strategy:
        max-parallel: 1
        matrix:
          version: [v8,v11,v17,v21]      
      steps:
        - name: Checkout recursive
          uses: actions/checkout@v2
        - name: License check
          uses: apache/skywalking-eyes@main
        #  continue-on-error: true
        - name: Assign TAG from pull request
          if:  ${{ github.event_name == 'pull_request' }}
          run: |
            echo "IMG_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
        - name: Assign TAG from push
          if:  ${{ github.event_name != 'pull_request' }}
          run: |
            echo "IMG_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"          
        - name: Use ASF docker hub repo
          if:  ${{ github.repository_owner == 'apache'}}
          run: |
            echo "BASE_REPO=apache" >> "$GITHUB_ENV"             
        - name: Use non ASF docker hub repo
          if:  ${{ github.repository_owner != 'apache'}}
          run: |
            echo "BASE_REPO=apache" >> "$GITHUB_ENV"        
        - name: Task
          run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin    
        - name: Load DockerHub secrets
          uses: 1password/load-secrets-action@v2
          with:
            # Export loaded secrets as environment variables
            export-env: true
          env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            OPS_DOCKERHUB_USER: op://OpenServerless/ops_github_dockerhub/username
            OPS_DOCKERHUB_TOKEN: op://OpenServerless/ops_github_dockerhub/password
            OPS_BASE_COMMON_IMAGE: op://OpenServerless/ops_github_dockerhub/base_common_image
        - name: Registry login
          uses: docker/login-action@v3
          with:
            #registry: registry.hub.docker.com
            username: ${{ env.OPS_DOCKERHUB_USER }}
            password: ${{ env.OPS_DOCKERHUB_TOKEN }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            version: "lab:latest"
            driver: cloud
            endpoint: "sciabarracom/openserverless-builder"
            use: true
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: ./runtime/java/${{ matrix.version }}
            platforms: linux/amd64,linux/arm64
            tags: ${{ env.BASE_REPO }}/openserverless-runtime-java:${{ matrix.version }}-${{ env.IMG_TAG }}
            build-args: COMMON=${{ env.OPS_BASE_COMMON_IMAGE }}
            # For pull requests, export results to the build cache.
            # Otherwise, push to a registry.
            outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}                  